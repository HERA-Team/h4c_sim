Timer unit: 1e-06 s

Total time: 1173.31 s
File: /ilifu/astro/projects/hera/smurray/miniconda3/envs/h4c/lib/python3.10/site-packages/hera_sim/visibilities/vis_cpu.py
Function: simulate at line 290

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   290                                               def simulate(self, data_model):
   291                                                   """
   292                                                   Calls :func:vis_cpu to perform the visibility calculation.
   293                                           
   294                                                   Returns
   295                                                   -------
   296                                                   array_like of self._complex_dtype
   297                                                       Visibilities. Shape=self.uvdata.data_array.shape.
   298                                                   """
   299         1         11.0     11.0      0.0          polarized = self._check_if_polarized(data_model)
   300         1        119.0    119.0      0.0          feed = self.get_feed(data_model.uvdata)
   301                                           
   302                                                   # Setup MPI info if enabled
   303         1          1.0      1.0      0.0          if self.mpi_comm is not None:
   304                                                       myid = self.mpi_comm.Get_rank()
   305                                                       nproc = self.mpi_comm.Get_size()
   306                                           
   307         1          1.0      1.0      0.0          if self.correct_source_positions:
   308                                                       # TODO: check if this is the right time to be using...
   309         2     157042.0  78521.0      0.0              ra, dec = self.correct_point_source_pos(
   310         1        305.0    305.0      0.0                  data_model, obstime=Time(data_model.uvdata.time_array[0], format="jd")
   311                                                       )
   312                                                   else:
   313                                                       ra, dec = data_model.sky_model.ra, data_model.sky_model.dec
   314                                           
   315         1       2849.0   2849.0      0.0          crd_eq = convs.point_source_crd_eq(ra, dec)
   316                                           
   317                                                   # Convert equatorial to topocentric coords
   318         1        170.0    170.0      0.0          eq2tops = self.get_eq2tops(data_model.uvdata, data_model.lsts)
   319                                           
   320                                                   # The following are antenna positions in the order that they are
   321                                                   # in the uvdata.data_array
   322         1       1795.0   1795.0      0.0          active_antpos, ant_list = data_model.uvdata.get_ENU_antpos(pick_data_ants=True)
   323                                           
   324                                                   # Get pixelized beams if required
   325         2       1057.0    528.5      0.0          beam_list = [
   326                                                       convs.prepare_beam(
   327                                                           data_model.beams[data_model.beam_ids[name]],
   328                                                           polarized=polarized,
   329                                                           use_feed=feed,
   330                                                       )
   331         2          3.0      1.5      0.0              for number, name in zip(
   332         1          6.0      6.0      0.0                  data_model.uvdata.antenna_numbers, data_model.uvdata.antenna_names
   333                                                       )
   334                                                       if number in ant_list
   335                                                   ]
   336                                           
   337                                                   # Get all the polarizations required to be simulated.
   338         2        405.0    202.5      0.0          req_pols = self._get_req_pols(
   339         1          2.0      2.0      0.0              data_model.uvdata, data_model.beams[0], polarized=polarized
   340                                                   )
   341                                           
   342                                                   # Empty visibility array
   343         1        210.0    210.0      0.0          visfull = np.zeros_like(data_model.uvdata.data_array, dtype=self._complex_dtype)
   344                                           
   345         2         11.0      5.5      0.0          for i, freq in enumerate(data_model.freqs):
   346                                                       # Divide tasks between MPI workers if needed
   347         1          2.0      2.0      0.0              if self.mpi_comm is not None and i % nproc != myid:
   348                                                           continue
   349                                           
   350                                                       # Call vis_cpu function to simulate visibilities
   351         2 1171594607.0 585797303.5     99.9              vis = self._vis_cpu(
   352         1          1.0      1.0      0.0                  antpos=active_antpos,
   353         1          1.0      1.0      0.0                  freq=freq,
   354         1          1.0      1.0      0.0                  eq2tops=eq2tops,
   355         1          1.0      1.0      0.0                  crd_eq=crd_eq,
   356         1        451.0    451.0      0.0                  I_sky=data_model.sky_model.stokes[0, i].to("Jy").value,
   357         1          2.0      2.0      0.0                  beam_list=beam_list,
   358         1          2.0      2.0      0.0                  precision=self._precision,
   359         1          2.0      2.0      0.0                  polarized=polarized,
   360                                                       )
   361                                           
   362         2    1546468.0 773234.0      0.1              self._reorder_vis(
   363         1         15.0     15.0      0.0                  req_pols, data_model.uvdata, visfull[:, 0, i], vis, ant_list, polarized
   364                                                       )
   365                                           
   366                                                   # Reduce visfull array if in MPI mode
   367         1          5.0      5.0      0.0          if self.mpi_comm is not None:
   368                                                       visfull = self._reduce_mpi(visfull, myid)
   369                                           
   370         1          1.0      1.0      0.0          return visfull

Total time: 1171.53 s
File: /ilifu/astro/projects/hera/smurray/miniconda3/envs/h4c/lib/python3.10/site-packages/vis_cpu/cpu.py
Function: vis_cpu at line 184

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   184                                           @profile
   185                                           def vis_cpu(
   186                                               *,
   187                                               antpos: np.ndarray,
   188                                               freq: float,
   189                                               eq2tops: np.ndarray,
   190                                               crd_eq: np.ndarray,
   191                                               I_sky: np.ndarray,
   192                                               beam_list: Sequence[UVBeam | Callable] | None,
   193                                               precision: int = 1,
   194                                               polarized: bool = False,
   195                                               beam_idx: np.ndarray | None = None,
   196                                               beam_spline_opts: dict | None = None,
   197                                           ):
   198                                               """
   199                                               Calculate visibility from an input intensity map and beam model.
   200                                           
   201                                               Parameters
   202                                               ----------
   203                                               antpos : array_like
   204                                                   Antenna position array. Shape=(NANT, 3).
   205                                               freq : float
   206                                                   Frequency to evaluate the visibilities at [GHz].
   207                                               eq2tops : array_like
   208                                                   Set of 3x3 transformation matrices to rotate the RA and Dec
   209                                                   cosines in an ECI coordinate system (see `crd_eq`) to
   210                                                   topocentric ENU (East-North-Up) unit vectors at each
   211                                                   time/LST/hour angle in the dataset.
   212                                                   Shape=(NTIMES, 3, 3).
   213                                               crd_eq : array_like
   214                                                   Cartesian unit vectors of sources in an ECI (Earth Centered
   215                                                   Inertial) system, which has the Earth's center of mass at
   216                                                   the origin, and is fixed with respect to the distant stars.
   217                                                   The components of the ECI vector for each source are:
   218                                                   (cos(RA) cos(Dec), sin(RA) cos(Dec), sin(Dec)).
   219                                                   Shape=(3, NSRCS).
   220                                               I_sky : array_like
   221                                                   Intensity distribution of sources/pixels on the sky, assuming intensity
   222                                                   (Stokes I) only. The Stokes I intensity will be split equally between
   223                                                   the two linear polarization channels, resulting in a factor of 0.5 from
   224                                                   the value inputted here. This is done even if only one polarization
   225                                                   channel is simulated.
   226                                                   Shape=(NSRCS,).
   227                                               beam_list : list of UVBeam, optional
   228                                                   If specified, evaluate primary beam values directly using UVBeam
   229                                                   objects instead of using pixelized beam maps. Only one of ``bm_cube`` and
   230                                                   ``beam_list`` should be provided.Note that if `polarized` is True,
   231                                                   these beams must be efield beams, and conversely if `polarized` is False they
   232                                                   must be power beams with a single polarization (either XX or YY).
   233                                               precision : int, optional
   234                                                   Which precision level to use for floats and complex numbers.
   235                                                   Allowed values:
   236                                                   - 1: float32, complex64
   237                                                   - 2: float64, complex128
   238                                               polarized : bool, optional
   239                                                   Whether to simulate a full polarized response in terms of nn, ne, en,
   240                                                   ee visibilities. See Eq. 6 of Kohn+ (arXiv:1802.04151) for notation.
   241                                                   Default: False.
   242                                               beam_idx
   243                                                   Optional length-NANT array specifying a beam index for each antenna.
   244                                                   By default, either a single beam is assumed to apply to all antennas or
   245                                                   each antenna gets its own beam.
   246                                           
   247                                               Returns
   248                                               -------
   249                                               vis : array_like
   250                                                   Simulated visibilities. If `polarized = True`, the output will have
   251                                                   shape (NTIMES, NFEED, NFEED, NANTS, NANTS), otherwise it will have
   252                                                   shape (NTIMES, NANTS, NANTS).
   253                                               """
   254         2         15.0      7.5      0.0      nax, nfeed, nant, ntimes = _validate_inputs(
   255         1          1.0      1.0      0.0          precision, polarized, antpos, eq2tops, crd_eq, I_sky
   256                                               )
   257                                           
   258         1          2.0      2.0      0.0      if precision == 1:
   259                                                   real_dtype = np.float32
   260                                                   complex_dtype = np.complex64
   261                                               else:
   262         1          2.0      2.0      0.0          real_dtype = np.float64
   263         1          1.0      1.0      0.0          complex_dtype = np.complex128
   264                                           
   265         2  993873642.0 496936821.0     84.8      beam_list, nbeam, beam_idx = _wrangle_beams(
   266         1          1.0      1.0      0.0          beam_idx, beam_list, polarized, nant, freq
   267                                               )
   268                                           
   269                                               # Intensity distribution (sqrt) and antenna positions. Does not support
   270                                               # negative sky. Factor of 0.5 accounts for splitting Stokes I between
   271                                               # polarization channels
   272         1       1040.0   1040.0      0.0      Isqrt = np.sqrt(0.5 * I_sky).astype(real_dtype)
   273         1          7.0      7.0      0.0      antpos = antpos.astype(real_dtype)
   274                                           
   275         1         31.0     31.0      0.0      ang_freq = 2.0 * np.pi * freq
   276                                           
   277                                               # Zero arrays: beam pattern, visibilities, delays, complex voltages
   278         1        269.0    269.0      0.0      vis = np.zeros((ntimes, nfeed * nant, nfeed * nant), dtype=complex_dtype)
   279         1       2805.0   2805.0      0.0      crd_eq = crd_eq.astype(real_dtype)
   280                                           
   281                                               # Loop over time samples
   282         4         45.0     11.2      0.0      for t, eq2top in enumerate(eq2tops.astype(real_dtype)):
   283                                                   # Dot product converts ECI cosines (i.e. from RA and Dec) into ENU
   284                                                   # (topocentric) cosines, with (tx, ty, tz) = (e, n, u) components
   285                                                   # relative to the center of the array
   286         3       5549.0   1849.7      0.0          tx, ty, tz = crd_top = np.dot(eq2top, crd_eq)
   287         3        345.0    115.0      0.0          above_horizon = tz > 0
   288         3       3485.0   1161.7      0.0          tx = tx[above_horizon]
   289         3       3435.0   1145.0      0.0          ty = ty[above_horizon]
   290         3         12.0      4.0      0.0          nsrcs_up = len(tx)
   291         3       3740.0   1246.7      0.0          isqrt = Isqrt[above_horizon]
   292                                           
   293         3       3505.0   1168.3      0.0          v = np.zeros((nant, nsrcs_up), dtype=complex_dtype)
   294                                           
   295         3      50313.0  16771.0      0.0          A_s = np.zeros((nax, nfeed, nbeam, nsrcs_up), dtype=complex_dtype)
   296                                           
   297         6  167251443.0 27875240.5     14.3          _evaluate_beam_cpu(
   298         3          3.0      1.0      0.0              A_s,
   299         3          3.0      1.0      0.0              beam_list,
   300         3          3.0      1.0      0.0              tx,
   301         3          3.0      1.0      0.0              ty,
   302         3          3.0      1.0      0.0              polarized,
   303         3          3.0      1.0      0.0              freq,
   304         3          2.0      0.7      0.0              spline_opts=beam_spline_opts,
   305                                                   )
   306         3         46.0     15.3      0.0          A_s = A_s.transpose((1, 2, 0, 3))  # Now (Nfeed, Nbeam, Nax, Nsrc)
   307                                           
   308         3         50.0     16.7      0.0          _log_array("beam", A_s)
   309                                           
   310                                                   # Calculate delays, where tau = (b * s) / c
   311         3     163673.0  54557.7      0.0          tau = np.dot(antpos / c.value, crd_top[:, above_horizon])
   312         3         69.0     23.0      0.0          _log_array("tau", tau)
   313                                           
   314         6    5318976.0 886496.0      0.5          v = _get_antenna_vis(
   315         3          5.0      1.7      0.0              A_s, ang_freq, tau, isqrt, beam_idx, nfeed, nant, nax, nsrcs_up
   316                                                   )
   317         3         64.0     21.3      0.0          _log_array("vant", v)
   318                                           
   319                                                   # Compute visibilities using product of complex voltages (upper triangle).
   320         3    4843541.0 1614513.7      0.4          vis[t] = v.conj().dot(v.T)
   321         3         71.0     23.7      0.0          _log_array("vis", vis[t])
   322                                           
   323         1          7.0      7.0      0.0      vis.shape = (ntimes, nfeed, nant, nfeed, nant)
   324                                           
   325                                               # Return visibilities with or without multiple polarization channels
   326         1          3.0      3.0      0.0      return vis.transpose((0, 1, 3, 2, 4)) if polarized else vis[:, 0, :, 0, :]

